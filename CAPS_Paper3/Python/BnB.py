# -*- coding: utf-8 -*-
"""
Created on April '20'

@author: Sohom Chatterjee
"""
#%% 1. Import Libraries
import matplotlib.pyplot as plt
import seaborn as sns
import random
from sympy import bell
from tqdm import tqdm
import numpy as np 
# import scipy.stats as stats
# import sys
import pandas as pd
import gurobipy as gp
from gurobipy import *
from gurobipy import tupledict
# import time
import cmath
import math
#%% 2. Function Definitions
def weight(lam,Node_1,Node_2):
    # print(Node_1,Node_2)
    sum=0
    for i in range(Node_1,Node_2):
        term=lam[i]*(Node_2-i)
        # if Node_1==25:
            # print(i)
        sum+=term/(1-term)
    # print(sum)    
    return sum


def feas_limit(lv):
    
    """
    Parameters
    ----------
    lambda_vec : list

    Returns
    -------
    final_vec : list
        
    This function takes as input the arrival vector and returns final_vec. 
    Each item in final_vec represents the node till which we construct edges for that index in the graph.
    eg., final_vec[i]=j represents that in the graph, each node from i to j-1 will have a node to j.
    """
    slots = len(lv)
    slot_vec=[i+math.floor(1/lv[i]) for i in range(slots)]
    low_lim=0
    final_vec=[]
    while len(final_vec)<slots:
        mn=min(slot_vec[low_lim:])
        argmin=(slot_vec[low_lim:]).index(mn)+len(slot_vec[:low_lim])
        hm=argmin-low_lim+1
        final_vec=final_vec+[mn]*hm  
        low_lim=low_lim+hm
    return final_vec[0:slots]


def Bellman(cost,B):   
    d=[[None for i in range(pop+1)] for i in range(B+1)]
    d[0]=[float("inf") for i in range(pop+1)]
    d[0][0]=0.0
    pathNode=[[None for i in range(pop+1)] for i in range(B+1)]
    for k in range(B):
        for i in range(pop+1):
            tempMin=float("inf")
            tempIndex=-1.0
            for j in range(i):
                if d[k][j]+cost[j][i]<tempMin:
                    tempMin=d[k][j]+cost[j][i]
                    tempIndex=j
            if tempMin<d[k][i]:
                d[k+1][i]=tempMin
                pathNode[k+1][i]=tempIndex
            else:
                d[k+1][i]=d[k][i]
                pathNode[k+1][i]=pathNode[k][i]
    
    path=[]
    node=pop
    # path.append(node)
    k=B
    while node>0:
        node=pathNode[k][node]
        path.append(node)
        k=k-1
        
    node_list=path
    of=0
    of+=cost[node_list[0]][slots]
    for ele in range(0,len(node_list)-1):
        of+=cost[node_list[ele+1]][node_list[ele]]
    return node_list,of

def calc_meas(cost,node_list):
    of=0
    of+=cost[node_list[0]][slots]
    for ele in range(0,len(node_list)-1):
        of+=cost[node_list[ele+1]][node_list[ele]]
    return of
#%% 3. LAMBDA_VECTOR
# lambda_vec=[
#     0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9
# ]
#Regular ArrivalRate
# lambda_vec=[3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525]
# lambda_vec = [i / 36 for i in lambda_vec]

#Crisis ArrivalRate
weekly_lam=[0.01042,0.0125,0.01944,0.01528,0.02083,0.02639,0.02292,0.02292,0.02847,0.01736,0.02431,0.02222,0.01597,0.00417,0.00208,0.00069,0.00069,0.00069
]
lambda_vec=[]
for i in weekly_lam:
    lambda_vec=lambda_vec+[i]*40



slots=len(lambda_vec)
# print(slots)
pop=slots
feas_vec=feas_limit(lambda_vec)
# feas_vec=[i+2 for i in range(slots)]

def get_wts(lam,feas):
    wt=[[100000000 for i in range(slots+1)]for i in range(slots)]
    for i in range(0,slots):
       for j in range(i+1,slots+1):
           if j>=feas[i]:
               break
           else:
               # print(i,j)
               wt[i][j]=weight(lam,i,j)
    return wt


#%% 4. Simulation

a=Bellman(wt,29)







#%% 5. BnB Algorithm

def chk_conf(a,b):
    # Remove last element (0) 
    a_set = set(a[:-1])
    b_set = set(b[:-1])
    if (a_set & b_set):
        return list(a_set & b_set)
    else:
        return []
    
def modifygraph(wt,conf):
    for i in range(len(wt)):
        wt[i][conf]=100000000
    return wt    
    


def Branch_Bound(wr,fr,wc,fc):
    
# Solve Shortest Path
    # wr=get_wt(lambda_r)
    # wc=get_wt(lambda_c)
    reg_sol=Bellman(wr,regular_slots)
    cris_sol=Bellman(wc,crisis_slots)
# Check Conflicts
    conflict_list=chk_conf(reg_sol[0],cris_sol[0])

# if no conflicts, add solution and OF to a global list and exit
    if conflict_list==[]:
        global solution_list
        solution_list=solution_list+[reg_sol,cris_sol]
        print([reg_sol,cris_sol])
        return
# if conflicts, resolve conflicts, 
    else: 
# solve P1 Disallow 1st regular conflict
        conf=conflict_list[0]
        
        feas_r_up=[i if i!=conf else i-1 for i in fr ]
        wt_reg_up=modifygraph(wr,conf)
        Branch_Bound(wt_reg_up,feas_r_up,wt_crisis,feas_c)

# solve P2 Disallow 1st crisis conflict
        feas_c_up=[i if i!=conf else i-1 for i in fc ]
        wt_crisis_up=modifygraph(wc,conf)
        Branch_Bound(wt_reg,feas_r,wt_crisis_up,feas_c_up)


#%% 6. Set initial parameters
# alpha_r=
# alpha_c=
# regular_slots=65
# crisis_slots=44

#Crisis Arrival Rate
weekly_lam_c=[0.01042,0.0125,0.01944,0.01528,0.02083,0.02639,0.02292,0.02292,0.02847,0.01736,0.02431,0.02222,0.01597,0.00417,0.00208,0.00069,0.00069,0.00069
]
lambda_c=[]
for i in weekly_lam_c:
    lambda_c=lambda_c+[i]*40
    
# Regular Arrival Rate
lambda_r=[3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,3.26025,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,4.181625,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.54375,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.217725,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.43035,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.161025,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,3.302775,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.877525,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.735775,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,2.35305,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.978075,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.269325,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.6237,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.212625,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.014175,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525,0.042525]
lambda_r = [i / 36 for i in lambda_r]

slots=len(lambda_r)
# print(slots)
pop=slots

feas_r=feas_limit(lambda_r)
feas_c=feas_limit(lambda_c)
solution_list=[]

wt_reg=get_wts(lambda_r,feas_r)
wt_crisis=get_wts(lambda_c,feas_c)


#%%
crisis_props=[i for i in range(2,7)]
reg_props=[i for i in range(6,11)]

for rp in reg_props:
    for cp in crisis_props:
        regular_slots=math.ceil(rp/100*slots)
        crisis_slots=math.ceil(cp/100*slots)
        
        a= Branch_Bound(wt_reg,feas_r,wt_crisis,feas_c)
        
        
        